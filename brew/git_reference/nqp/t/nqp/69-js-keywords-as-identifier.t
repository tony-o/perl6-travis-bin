plan(35);
class Reserved {
    method break() {'break'}
    method case() {'case'}
    method catch() {'catch'}
    method continue() {'continue'}
    method debugger() {'debugger'}
    method default() {'default'}
    method delete() {'delete'}
    method do() {'do'}
    method else() {'else'}
    method finally() {'finally'}
    method for() {'for'}
    method function() {'function'}
    method if() {'if'}
    method in() {'in'}
    method instanceof() {'instanceof'}
    method new() {'new'}
    method return() {'return'}
    method switch() {'switch'}
    method this() {'this'}
    method throw() {'throw'}
    method try() {'try'}
    method typeof() {'typeof'}
    method var() {'var'}
    method void() {'void'}
    method while() {'while'}
    method with() {'with'}
    method implements() {'implements'}
    method interface() {'interface'}
    method let() {'let'}
    method package() {'package'}
    method private() {'private'}
    method protected() {'protected'}
    method public() {'public'}
    method static() {'static'}
    method yield() {'yield'}
}
ok(Reserved.break eq 'break');
ok(Reserved.case eq 'case');
ok(Reserved.catch eq 'catch');
ok(Reserved.continue eq 'continue');
ok(Reserved.debugger eq 'debugger');
ok(Reserved.default eq 'default');
ok(Reserved.delete eq 'delete');
ok(Reserved.do eq 'do');
ok(Reserved.else eq 'else');
ok(Reserved.finally eq 'finally');
ok(Reserved.for eq 'for');
ok(Reserved.function eq 'function');
ok(Reserved.if eq 'if');
ok(Reserved.in eq 'in');
ok(Reserved.instanceof eq 'instanceof');
ok(Reserved.new eq 'new');
ok(Reserved.return eq 'return');
ok(Reserved.switch eq 'switch');
ok(Reserved.this eq 'this');
ok(Reserved.throw eq 'throw');
ok(Reserved.try eq 'try');
ok(Reserved.typeof eq 'typeof');
ok(Reserved.var eq 'var');
ok(Reserved.void eq 'void');
ok(Reserved.while eq 'while');
ok(Reserved.with eq 'with');
ok(Reserved.implements eq 'implements');
ok(Reserved.interface eq 'interface');
ok(Reserved.let eq 'let');
ok(Reserved.package eq 'package');
ok(Reserved.private eq 'private');
ok(Reserved.protected eq 'protected');
ok(Reserved.public eq 'public');
ok(Reserved.static eq 'static');
ok(Reserved.yield eq 'yield');
