#include "pmc_nqplexinfo.h"
#include "../6model/sixmodelobject.h"

/* Flag for indicating that we initialized the lexpad state. */
#define PObj_LEXPAD_STATE_INIT_FLAG PObj_private1_FLAG

/* Possible options for boxed primitives. */
#define STORAGE_SPEC_BP_NONE    0
#define STORAGE_SPEC_BP_INT     1
#define STORAGE_SPEC_BP_NUM     2
#define STORAGE_SPEC_BP_STR     3

/* Locates the register number for getting the specified name
 * and type of lexical. */
static INTVAL register_number_for_get(PARROT_INTERP, Hash *hash,
        STRING *name, INTVAL reg_type) {
    HashBucket *b = Parrot_hash_get_bucket(interp, hash, name);
    if (!b)
        return -1;
    if (((INTVAL)b->value & 3) != reg_type)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' is of wrong register type in lexical lookup", name);

    return ((INTVAL)b->value) >> 2;
}

/* Locates the register number for setting the specified name
 * and type of lexical. */
static INTVAL register_number_for_set(PARROT_INTERP, Hash *hash,
        STRING *name, INTVAL reg_type) {
    HashBucket *b = Parrot_hash_get_bucket(interp, hash, name);
    if (!b)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' not found", name);
    if (((INTVAL)b->value & 3) != reg_type)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' is of wrong register type in lexical lookup", name);

    return ((INTVAL)b->value) >> 2;
}

pmclass NQPLexPad
    provides hash
    auto_attrs
    dynpmc group nqp
    hll nqp
    maps LexPad
{
    ATTR PMC *lexinfo;
    ATTR PMC *ctx;
    
    /* Cache of the hash from the static lex info, so we needn't look it up
     * every time. */
    ATTR Hash *lexinfo_hash;

    VTABLE void init() {
        UNUSED(SELF);
        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
            "Cannot create a NQPLexPad PMC without an initializer");
    }

/*

=item C<init_pmc(PMC *lexinfo)>

Initialize the LexPad PMC and remember the associate
lexinfo.

=item C<void set_pointer(void *)>

Associate the context, and set into it any static entries.

=item C<INTVAL elements()>

Returns the number of elements in the hash.

=item C<INTVAL exists_keyed(PMC *name)>

=item C<INTVAL exists_keyed_str(STRING *name)>

Returns whether a lexical C<name> exists in the hash.

=item C<PMC *get_pmc_keyed_str(STRING *name)>

=item C<PMC *get_pmc_keyed(PMC *name)>

Return the lexical with the given name, or NULL (not PMCNULL), if the
lexical doesn't exist.

=item C<void set_pmc_keyed(PMC *name, PMC *value)>

=item C<void set_pmc_keyed_str(STRING *name, PMC *value)>

Set the lexical with the given name to value. If the lexical name
doesn't exist, it is created.

=item C<PMC *get_lexinfo()>

Return the LexInfo PMC, if any or a Null PMC.

=cut

*/
    VTABLE void init_pmc(PMC *lexinfo) {
        SET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        PObj_custom_mark_SET(SELF);
    }
    
    VTABLE void mark() {
        PMC *lexinfo, *ctx;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        Parrot_gc_mark_PMC_alive(INTERP, lexinfo);
        Parrot_gc_mark_PMC_alive(INTERP, ctx);
    }

    VTABLE void set_pointer(void *ctx) {
        /* Check if we need to put any static values in place. */
        PMC *info;
        Hash *hash;
        GET_ATTR_lexinfo(INTERP, SELF, info);
        if (info->vtable->base_type != enum_class_LexInfo
#ifdef enum_class_Proxy
            && info->vtable->base_type != enum_class_Proxy
#endif
        ) {
            PMC *name_map;
            GETATTR_NQPLexInfo_name_to_register_map(INTERP, info, name_map);
            hash = (Hash *)VTABLE_get_pointer(INTERP, name_map);
        }
        else {
            hash = (Hash *)VTABLE_get_pointer(INTERP, info);
        }
        SET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        
        if (info->vtable->base_type != enum_class_LexInfo) {
            PMC *static_slots_cache;
            GETATTR_NQPLexInfo_static_slots_cache(INTERP, info, static_slots_cache);
            if (!PMC_IS_NULL(static_slots_cache)) {
                /* Yes, we have some. Grab values/flags too, then iterate. */
                PMC *static_values_cache, *static_flags_cache;
                PMC *state = NULL;
                INTVAL num_statics = VTABLE_elements(interp, static_slots_cache);
                INTVAL i, had_state = 0;
                GETATTR_NQPLexInfo_static_values_cache(INTERP, info, static_values_cache);
                GETATTR_NQPLexInfo_static_flags_cache(INTERP, info, static_flags_cache);
                for (i = 0; i < num_statics; i++) {
                    INTVAL  slot  = VTABLE_get_integer_keyed_int(interp, static_slots_cache, i);
                    PMC    *value = VTABLE_get_pmc_keyed_int(interp, static_values_cache, i);
                    INTVAL  flag  = VTABLE_get_integer_keyed_int(interp, static_flags_cache, i);

                    switch (flag) {
                    case 0:
                        CTX_REG_PMC(interp, (PMC *)ctx, slot) = value;
                        break;
                    case 1: {
                        PMC *cont = REPR(value)->allocate(interp, STABLE(value));
                        REPR(value)->copy_to(interp, STABLE(value), OBJECT_BODY(value), OBJECT_BODY(cont));
                        PARROT_GC_WRITE_BARRIER(INTERP, cont);
                        CTX_REG_PMC(interp, (PMC *)ctx, slot) = cont;
                        break;
                    }
                    case 2: {
                        if (!state) {
                            PMC *sub = Parrot_pcc_get_sub(interp, (PMC *)ctx);
                            state = Parrot_pmc_getprop(interp, sub, CONST_STRING(interp, "state_vars"));
                            if (PMC_IS_NULL(state)) {
                                state = Parrot_pmc_new(interp, enum_class_ResizablePMCArray);
                                Parrot_pmc_setprop(interp, sub, CONST_STRING(interp, "state_vars"), state);
                                had_state = 0;
                                PObj_flag_SET(LEXPAD_STATE_INIT, (PMC *)ctx);
                            }
                            else {
                                had_state = 1;
                            }
                        }
                        if (had_state) {
                            CTX_REG_PMC(interp, (PMC *)ctx, slot) = VTABLE_get_pmc_keyed_int(interp, state, i);
                        }
                        else {
                            PMC *cont = REPR(value)->allocate(interp, STABLE(value));
                            REPR(value)->copy_to(interp, STABLE(value), OBJECT_BODY(value), OBJECT_BODY(cont));
                            PARROT_GC_WRITE_BARRIER(INTERP, cont);
                            VTABLE_set_pmc_keyed_int(interp, state, i, cont);
                            CTX_REG_PMC(interp, (PMC *)ctx, slot) = cont;
                        }
                    }
                    break;
                    default:
                        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
                            "Unknown flag in NQPLexPad.set_pointer");
                    };
                }
                PARROT_GC_WRITE_BARRIER(INTERP, (PMC *)ctx);
            }
        }
        
        /* Stash the context pointer. */
        SET_ATTR_ctx(INTERP, SELF, (PMC *)ctx);
    }

    VTABLE INTVAL elements() {
        PMC *info;
        GET_ATTR_lexinfo(INTERP, SELF, info);
        return VTABLE_elements(interp, info);
    }

    VTABLE INTVAL exists_keyed_str(STRING *name) {
        PMC *info, *name_map;
        const Hash *hash;
        GET_ATTR_lexinfo(INTERP, SELF, info);
        if (info->vtable->base_type != enum_class_LexInfo) {
            GETATTR_NQPLexInfo_name_to_register_map(INTERP, info, name_map);
            hash = (const Hash *)VTABLE_get_pointer(INTERP, name_map);
        }
        else {
            hash = (const Hash *)VTABLE_get_pointer(INTERP, info);
        }

        return hash->entries
            ? (Parrot_hash_get_bucket(INTERP, hash, name) != 0)
            : 0;
    }

    VTABLE INTVAL exists_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.exists_keyed_str(s);
    }

    VTABLE PMC *get_pmc_keyed_str(STRING *name) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_get(INTERP, hash, name, REGNO_PMC);
        if (reg < 0)
            return PMCNULL;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_PMC(interp, ctx, reg);
    }

    VTABLE INTVAL get_integer_keyed_str(STRING *name) :no_wb {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_get(INTERP, hash, name, REGNO_INT);
        if (reg < 0)
            return 0;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_INT(interp, ctx, reg);
    }
    
    VTABLE FLOATVAL get_number_keyed_str(STRING *name) :no_wb {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_get(INTERP, hash, name, REGNO_NUM);
        if (reg < 0)
            return 0.0;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_NUM(interp, ctx, reg);
    }
    
    VTABLE STRING *get_string_keyed_str(STRING *name) :no_wb {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_get(INTERP, hash, name, REGNO_STR);
        if (reg < 0)
            return STRINGNULL;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_STR(interp, ctx, reg);
    }

    VTABLE PMC *get_pmc_keyed(PMC *name) :no_wb {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_pmc_keyed_str(s);
    }

    VTABLE INTVAL get_integer_keyed(PMC *name) :no_wb {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_integer_keyed_str(s);
    }
    
    VTABLE FLOATVAL get_number_keyed(PMC *name) :no_wb {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_number_keyed_str(s);
    }

    VTABLE STRING *get_string_keyed(PMC *name) :no_wb {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_string_keyed_str(s);
    }

    VTABLE void set_pmc_keyed_str(STRING *name, PMC *value) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_set(INTERP, hash, name, REGNO_PMC);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_PMC(interp, ctx, reg) = value;
        PARROT_GC_WRITE_BARRIER(INTERP, ctx);
    }
    
    VTABLE void set_integer_keyed_str(STRING *name, INTVAL value) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_set(INTERP, hash, name, REGNO_INT);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_INT(interp, ctx, reg) = value;
    }
    
    VTABLE void set_number_keyed_str(STRING *name, FLOATVAL value) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_set(INTERP, hash, name, REGNO_NUM);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_NUM(interp, ctx, reg) = value;
    }
    
    VTABLE void set_string_keyed_str(STRING *name, STRING *value) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_set(INTERP, hash, name, REGNO_STR);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_STR(interp, ctx, reg) = value;
        PARROT_GC_WRITE_BARRIER(INTERP, ctx);
    }

    VTABLE void set_pmc_keyed(PMC *name, PMC *value) :manual_wb {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_pmc_keyed_str(s, value);
    }

    VTABLE void set_integer_keyed(PMC *name, INTVAL value) :manual_wb {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_integer_keyed_str(s, value);
    }

    VTABLE void set_number_keyed(PMC *name, FLOATVAL value) :manual_wb {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_number_keyed_str(s, value);
    }

    VTABLE void set_string_keyed(PMC *name, STRING *value) :manual_wb {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_string_keyed_str(s, value);
    }

    METHOD get_lexinfo() :no_wb {
        PMC *lexinfo;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        RETURN(PMC *lexinfo);
    }
    
    METHOD get_lex_type(STRING *name) :no_wb {
        Hash *hash;
        HashBucket *b;
        INTVAL spec;
        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        b = Parrot_hash_get_bucket(interp, hash, name);
        if (!b)
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
                "Lexical '%Ss' not found", name);
        switch ((INTVAL)b->value & 3) {
            case REGNO_INT: spec = STORAGE_SPEC_BP_INT; break;
            case REGNO_NUM: spec = STORAGE_SPEC_BP_NUM; break;
            case REGNO_STR: spec = STORAGE_SPEC_BP_STR; break;
            default: spec = STORAGE_SPEC_BP_NONE; break;
        }
        RETURN(INTVAL spec);
    }

/*

=item C<PMC *get_iter()>

Get iterator for declared lexicals.

=cut

*/
    VTABLE PMC *get_iter() :no_wb {
        PMC *lexinfo;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        return VTABLE_get_iter(INTERP, lexinfo);
    }

}

/*

=back

=cut

*/
