/* A serialization context is a container for a set of objects
 * that exist per compilation unit and cross the compile-time /
 * runtime boundary. */

#include "../6model/sixmodelobject.h"
static INTVAL smo_id    = 0;
 
pmclass SerializationContext auto_attrs dynpmc group nqp {
    /* The handle of this SC. */
    ATTR STRING *handle;
    
    /* The root set of objects that live in this SC. */
    ATTR PMC *root_objects;
    
    /* The root set of STables that live in this SC. */
    ATTR PMC *root_stables;
    
    /* The root set of code refs that live in this SC. */
    ATTR PMC *root_codes;
    
    /* Description (probably the file name) if any. */
    ATTR STRING *description;
    
    /* Repossession info. The following RIA and RPA have matching indexes, each
     * representing the integer of an object in our root set along with the SC
     * that the object was originally from. */
    ATTR PMC *rep_indexes;
    ATTR PMC *rep_scs;
    
    VTABLE void init() {
        PMC *root_objects = Parrot_pmc_new(interp, enum_class_ResizablePMCArray);
        PMC *root_stables = Parrot_pmc_new(interp, enum_class_ResizablePMCArray);
        PMC *root_codes   = Parrot_pmc_new(interp, enum_class_ResizablePMCArray);
        PMC *rep_indexes  = Parrot_pmc_new(interp, enum_class_ResizableIntegerArray);
        PMC *rep_scs      = Parrot_pmc_new(interp, enum_class_ResizablePMCArray);
        SET_ATTR_root_objects(interp, SELF, root_objects);
        SET_ATTR_root_stables(interp, SELF, root_stables);
        SET_ATTR_root_codes(interp, SELF, root_codes);
        SET_ATTR_rep_indexes(interp, SELF, rep_indexes);
        SET_ATTR_rep_scs(interp, SELF, rep_scs);
        PObj_custom_mark_SET(SELF);
        if (!smo_id)
            smo_id = Parrot_pmc_get_type_str(interp, Parrot_str_new(interp, "SixModelObject", 0));
    }
    
    VTABLE void set_string_native(STRING *handle) {
        SET_ATTR_handle(interp, SELF, handle);
    }

    VTABLE void mark() :no_wb {
        PMC    *root_objects, *root_stables, *root_codes, *rep_indexes, *rep_scs;
        STRING *handle, *description;
        GET_ATTR_root_objects(interp, SELF, root_objects);
        Parrot_gc_mark_PMC_alive(INTERP, root_objects);
        GET_ATTR_root_stables(interp, SELF, root_stables);
        Parrot_gc_mark_PMC_alive(INTERP, root_stables);
        GET_ATTR_root_codes(interp, SELF, root_codes);
        Parrot_gc_mark_PMC_alive(INTERP, root_codes);
        GET_ATTR_handle(interp, SELF, handle);
        Parrot_gc_mark_STRING_alive(INTERP, handle);
        GET_ATTR_description(interp, SELF, description);
        Parrot_gc_mark_STRING_alive(INTERP, description);
        GET_ATTR_rep_indexes(interp, SELF, rep_indexes);
        Parrot_gc_mark_PMC_alive(INTERP, rep_indexes);
        GET_ATTR_rep_scs(interp, SELF, rep_scs);
        Parrot_gc_mark_PMC_alive(INTERP, rep_scs);
    }
    
    VTABLE PMC* get_pmc_keyed_int(INTVAL idx) {
        PMC    *root_objects;
        GET_ATTR_root_objects(interp, SELF, root_objects);
        return VTABLE_get_pmc_keyed_int(interp, root_objects, idx);
    }
    
    VTABLE PMC* get_pmc_keyed(PMC *idx) {
        PMC    *root_objects;
        GET_ATTR_root_objects(interp, SELF, root_objects);
        return VTABLE_get_pmc_keyed(interp, root_objects, idx);
    }
    
    VTABLE void set_pmc_keyed_int(INTVAL idx, PMC *value) {
        PMC    *root_objects;
        GET_ATTR_root_objects(interp, SELF, root_objects);
        VTABLE_set_pmc_keyed_int(interp, root_objects, idx, value);
        if (value->vtable->base_type == smo_id) {
            /* Check if the STable is already owned; if not, take it
             * for this SC. */
            if (PMC_IS_NULL(STABLE(value)->sc)) {
                PMC *root_stables;
                GET_ATTR_root_stables(interp, SELF, root_stables);
                STABLE(value)->sc = SELF;
                VTABLE_push_pmc(interp, root_stables, STABLE_PMC(value));
            }
        }
    }
    
    VTABLE void set_pmc_keyed(PMC *idx, PMC *value) :manual_wb {
        PMC    *root_objects;
        GET_ATTR_root_objects(interp, SELF, root_objects);
        VTABLE_set_pmc_keyed(interp, root_objects, idx, value);
    }
    
    VTABLE INTVAL elements() {
        PMC    *root_objects;
        GET_ATTR_root_objects(interp, SELF, root_objects);
        return VTABLE_elements(interp, root_objects);
    }
    
    METHOD INTVAL elems() :no_wb {
        PMC    *root_objects;
        INTVAL elems;
        GET_ATTR_root_objects(interp, SELF, root_objects);
        elems = VTABLE_elements(interp, root_objects);
        RETURN (INTVAL elems);
    }
    
    METHOD STRING* handle() :no_wb {
        STRING *handle;
        GET_ATTR_handle(interp, SELF, handle);
        RETURN (STRING* handle);
    }
    
    METHOD set_description(STRING *description) {
        SET_ATTR_description(interp, SELF, description);
        RETURN (STRING* description);
    }
    
    METHOD STRING* description() :no_wb {
        STRING *description;
        GET_ATTR_description(interp, SELF, description);
        RETURN (STRING* description);
    }
    
    METHOD INTVAL slot_index_for(PMC *obj) :no_wb {
        /* This is kinda stupid, but it'll do for now. */
        PMC    *root_objects;
        INTVAL  i, count;
        GET_ATTR_root_objects(interp, SELF, root_objects);
        count = VTABLE_elements(interp, root_objects);
        for (i = 0; i < count; i++) {
            if (VTABLE_get_pmc_keyed_int(interp, root_objects, i) == obj) {
                RETURN (INTVAL i);
            }
        }
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Object does not exist in serialization context");
    }
}
