
# Makefile code generated by Configure.pl:

# Generated from tools/build/Makefile-common-macros.in
# Copyright (C) 2015 The Perl Foundation

PERL    = /usr/bin/perl
PROVE   = prove
MKPATH  = $(PERL) -MExtUtils::Command -e mkpath
CHMOD   = $(PERL) -MExtUtils::Command -e chmod
CP      = $(PERL) -MExtUtils::Command -e cp
RM_F    = $(PERL) -MExtUtils::Command -e rm_f
RM_RF   = $(PERL) -MExtUtils::Command -e rm_rf
SHELL   = sh

SYSROOT= 
SDKROOT= 
PREFIX = /home/travis/.rakudobrew/moar-nom/install
PERL6_LANG_DIR = $(PREFIX)/share/perl6

BOOTSTRAP_SOURCES = \
  src/Perl6/Metamodel/BOOTSTRAP.nqp \
  src/Perl6/Metamodel/EXPORTHOW.nqp \

COMMON_BOOTSTRAP_SOURCES = \
	  src/Perl6/Metamodel/Configuration.nqp\
  src/Perl6/Metamodel/Archetypes.nqp\
  src/Perl6/Metamodel/Naming.nqp\
  src/Perl6/Metamodel/Documenting.nqp\
  src/Perl6/Metamodel/Stashing.nqp\
  src/Perl6/Metamodel/Versioning.nqp\
  src/Perl6/Metamodel/TypePretense.nqp\
  src/Perl6/Metamodel/MethodDelegation.nqp\
  src/Perl6/Metamodel/BoolificationProtocol.nqp\
  src/Perl6/Metamodel/PackageHOW.nqp\
  src/Perl6/Metamodel/ModuleHOW.nqp\
  src/Perl6/Metamodel/GenericHOW.nqp\
  src/Perl6/Metamodel/AttributeContainer.nqp\
  src/Perl6/Metamodel/Finalization.nqp\
  src/Perl6/Metamodel/MethodContainer.nqp\
  src/Perl6/Metamodel/PrivateMethodContainer.nqp\
  src/Perl6/Metamodel/MultiMethodContainer.nqp\
  src/Perl6/Metamodel/MetaMethodContainer.nqp\
  src/Perl6/Metamodel/RoleContainer.nqp\
  src/Perl6/Metamodel/MultipleInheritance.nqp\
  src/Perl6/Metamodel/DefaultParent.nqp\
  src/Perl6/Metamodel/BaseType.nqp\
  src/Perl6/Metamodel/C3MRO.nqp\
  src/Perl6/Metamodel/MROBasedMethodDispatch.nqp\
  src/Perl6/Metamodel/MROBasedTypeChecking.nqp\
  src/Perl6/Metamodel/Trusting.nqp\
  src/Perl6/Metamodel/Mixins.nqp\
  src/Perl6/Metamodel/BUILDPLAN.nqp\
  src/Perl6/Metamodel/REPRComposeProtocol.nqp\
  src/Perl6/Metamodel/InvocationProtocol.nqp\
  src/Perl6/Metamodel/RolePunning.nqp\
  src/Perl6/Metamodel/ArrayType.nqp\
  src/Perl6/Metamodel/RoleToRoleApplier.nqp\
  src/Perl6/Metamodel/ConcreteRoleHOW.nqp\
  src/Perl6/Metamodel/CurriedRoleHOW.nqp\
  src/Perl6/Metamodel/ParametricRoleHOW.nqp\
  src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp\
  src/Perl6/Metamodel/RoleToClassApplier.nqp\
  src/Perl6/Metamodel/ClassHOW.nqp\
  src/Perl6/Metamodel/GrammarHOW.nqp\
  src/Perl6/Metamodel/NativeHOW.nqp\
  src/Perl6/Metamodel/NativeRefHOW.nqp\
  src/Perl6/Metamodel/SubsetHOW.nqp\
  src/Perl6/Metamodel/EnumHOW.nqp\
  src/Perl6/Metamodel/CoercionHOW.nqp\
  src/Perl6/Metamodel/DefiniteHOW.nqp\
  src/Perl6/Metamodel/ContainerDescriptor.nqp\
  src/Perl6/Metamodel/Dispatchers.nqp\


R_SETTING_SRC = src/RESTRICTED.setting


# (end of section generated from tools/build/Makefile-common-macros.in)

all: m-all m-runner-default
install: m-install m-runner-default-install
clean: m-clean
	$(RM_F) perl6

test: m-test
spectest: m-spectest
coretest: m-coretest
localtest: m-localtest
stresstest: m-stresstest

# Generated from tools/build/Makefile-common-rules.in
# Copyright (C) 2015 The Perl Foundation

spectest_checkout : t/spec
t/spec :
	git clone git://github.com/perl6/roast.git t/spec
	-cd t/spec/ && git config remote.origin.pushurl git@github.com:perl6/roast.git

spectest_update :
	-cd t/spec && git pull --ff-only

t/localtest.data:
	$(PERL) -MExtUtils::Command -e test_f $@

realclean: clean
	$(RM_F) Makefile config.status MANIFEST
	$(RM_RF) lib/.precomp/ t/04-nativecall/.precomp/

distclean: realclean


# (end of section generated from tools/build/Makefile-common-rules.in)


# Generated from tools/build/Makefile-Moar.in
M_CC      = gcc
M_LD      = gcc
M_CFLAGS  = -Wdeclaration-after-statement -Werror=declaration-after-statement -O3 -DNDEBUG  -D_REENTRANT -D_FILE_OFFSET_BITS=64 -fPIC -Wdeclaration-after-statement -Werror=declaration-after-statement -O3 -DNDEBUG 
M_LDFLAGS =  -O3 -DNDEBUG -Wl,-rpath,/home/travis/.rakudobrew/moar-nom/install/lib -Wl,-rpath,/home/travis/.rakudobrew/moar-nom/install/share/perl6/site/lib  -O3 -DNDEBUG -lm -lpthread -lrt -ldl

M_GEN_CAT = tools/build/gen-cat.nqp moar

M_BUILD_DIR = gen/moar

MOAR   = $(PREFIX)/bin/moar
M_NQP  = $(PREFIX)/bin/nqp-m
M_LIBPATH = $(PREFIX)/share/nqp/lib

M_RUN_PERL6 = $(MOAR) --libpath="$(M_LIBPATH)" perl6.moarvm

M_BAT    = 
M_RUNNER = perl6-m

# files we create
PERL6_MOAR     = perl6.moarvm
PERL6_ML_MOAR  = blib/Perl6/ModuleLoader.moarvm
PERL6_W_MOAR   = blib/Perl6/World.moarvm
PERL6_G_MOAR   = blib/Perl6/Grammar.moarvm
PERL6_OPS_MOAR = blib/Perl6/Ops.moarvm
PERL6_A_MOAR   = blib/Perl6/Actions.moarvm
PERL6_O_MOAR   = blib/Perl6/Optimizer.moarvm
PERL6_P_MOAR   = blib/Perl6/Pod.moarvm
PERL6_C_MOAR   = blib/Perl6/Compiler.moarvm
PERL6_M_MOAR   = blib/Perl6/Metamodel.moarvm
PERL6_B_MOAR   = blib/Perl6/BOOTSTRAP.moarvm
SETTING_MOAR   = CORE.setting.moarvm
R_SETTING_MOAR = RESTRICTED.setting.moarvm

M_PERL6_OPS_DIR  = dynext
M_PERL6_OPS_DLL  = $(M_PERL6_OPS_DIR)/libperl6_ops_moar.so
M_PERL6_OPS_OBJ  = $(M_PERL6_OPS_DIR)/perl6_ops.o
M_PERL6_CONT_OBJ = $(M_PERL6_OPS_DIR)/container.o
M_PERL6_OPS_SRC  = src/vm/moar/ops/perl6_ops.c
M_PERL6_CONT_SRC = src/vm/moar/ops/container.c

M_PERL6_LANG_OUTPUT = \
    $(PERL6_ML_MOAR) $(PERL6_W_MOAR) $(PERL6_G_MOAR) $(PERL6_OPS_MOAR) \
    $(PERL6_A_MOAR) $(PERL6_O_MOAR) $(PERL6_P_MOAR) $(PERL6_C_MOAR) \
    $(PERL6_M_MOAR) $(PERL6_B_MOAR)

M_METAMODEL_SOURCES = $(COMMON_BOOTSTRAP_SOURCES)

# The ordering here is important for bootstrapping reasons. In general:
# * traits almost certainly have to come first
# * stubs have to come after traits since they use them
# * Attribute needs to come before anything that uses an attribute
# We break various other circularities in Perl6::Metamodel::BOOTSTRAP.
# Note that you only really have to worry especially about things that
# the compiler will instantiate/call methods on while compiling the
# setting - basically anything that feels MOP-ish.
M_CORE_SOURCES = \
	  src/core/core_prologue.pm\
  src/core/traits.pm\
  src/core/Positional.pm\
  src/core/Associative.pm\
  src/core/Callable.pm\
  src/core/natives.pm\
  src/core/stubs.pm\
  src/core/control.pm\
  src/core/Mu.pm\
  src/core/Stringy.pm\
  src/core/Any.pm\
  src/core/Attribute.pm\
  src/core/Iterator.pm\
  src/core/Rakudo/Internals.pm\
  src/core/SlippyIterator.pm\
  src/core/HyperIterator.pm\
  src/core/Iterable.pm\
  src/core/HyperIterable.pm\
  src/core/Any-iterable-methods.pm\
  src/core/SLICE.pm\
  src/core/Whatever.pm\
  src/core/hash_slice.pm\
  src/core/Scalar.pm\
  src/core/Code.pm\
  src/core/WhateverCode.pm\
  src/core/Block.pm\
  src/core/Variable.pm\
  src/core/Routine.pm\
  src/core/Sub.pm\
  src/core/Macro.pm\
  src/core/Method.pm\
  src/core/Submethod.pm\
  src/core/Junction.pm\
  src/core/Cool.pm\
  src/core/Enumeration.pm\
  src/core/Numeric.pm\
  src/core/Real.pm\
  src/core/Int.pm\
  src/core/Bool.pm\
  src/core/Order.pm\
  src/core/UInt64.pm\
  src/core/Num.pm\
  src/core/Buf.pm\
  src/core/Uni.pm\
  src/core/Str.pm\
  src/core/Capture.pm\
  src/core/IterationBuffer.pm\
  src/core/HyperConfiguration.pm\
  src/core/HyperWorkBuffer.pm\
  src/core/Seq.pm\
  src/core/HyperSeq.pm\
  src/core/Nil.pm\
  src/core/Range.pm\
  src/core/List.pm\
  src/core/array_slice.pm\
  src/core/Slip.pm\
  src/core/Array.pm\
  src/core/native_array.pm\
  src/core/Pair.pm\
  src/core/Map.pm\
  src/core/Hash.pm\
  src/core/Stash.pm\
  src/core/Label.pm\
  src/core/PseudoStash.pm\
  src/core/Parameter.pm\
  src/core/Signature.pm\
  src/core/Rational.pm\
  src/core/Rat.pm\
  src/core/Complex.pm\
  src/core/Backtrace.pm\
  src/core/Exception.pm\
  src/core/Failure.pm\
  src/core/Match.pm\
  src/core/Cursor.pm\
  src/core/Grammar.pm\
  src/core/Regex.pm\
  src/core/IO.pm\
  src/core/IO/Spec.pm\
  src/core/IO/Spec/Unix.pm\
  src/core/IO/Spec/Win32.pm\
  src/core/IO/Spec/Cygwin.pm\
  src/core/IO/Spec/QNX.pm\
  src/core/IO/Notification.pm\
  src/core/IO/Handle.pm\
  src/core/IO/Pipe.pm\
  src/core/IO/Path.pm\
  src/core/IO/Special.pm\
  src/core/io_operators.pm\
  src/core/IO/ArgFiles.pm\
  src/core/AST.pm\
  src/core/CallFrame.pm\
  src/core/allomorphs.pm\
  src/core/Main.pm\
  src/core/Instant.pm\
  src/core/Duration.pm\
  src/core/Dateish.pm\
  src/core/DateTime.pm\
  src/core/Date.pm\
  src/core/EXPORTHOW.pm\
  src/core/Pod.pm\
  src/core/QuantHash.pm\
  src/core/Setty.pm\
  src/core/Set.pm\
  src/core/SetHash.pm\
  src/core/Baggy.pm\
  src/core/Bag.pm\
  src/core/BagHash.pm\
  src/core/Mixy.pm\
  src/core/Mix.pm\
  src/core/MixHash.pm\
  src/core/set_operators.pm\
  src/core/ObjAt.pm\
  src/core/Version.pm\
  src/core/ForeignCode.pm\
  src/core/operators.pm\
  src/core/metaops.pm\
  src/core/precedence.pm\
  src/core/Deprecations.pm\
  src/core/Thread.pm\
  src/core/Lock.pm\
  src/core/Semaphore.pm\
  src/core/Cancellation.pm\
  src/core/Scheduler.pm\
  src/core/Env.pm\
  src/core/ThreadPoolScheduler.pm\
  src/core/CurrentThreadScheduler.pm\
  src/core/Promise.pm\
  src/core/Channel.pm\
  src/core/Supply.pm\
  src/core/asyncops.pm\
  src/core/IO/Socket.pm\
  src/core/IO/Socket/INET.pm\
  src/core/IO/Socket/Async.pm\
  src/core/Proc.pm\
  src/core/Proc/Async.pm\
  src/core/signals.pm\
  src/core/Systemic.pm\
  src/core/VM.pm\
  src/core/Distro.pm\
  src/core/Kernel.pm\
  src/core/Compiler.pm\
  src/core/Perl.pm\
  src/core/OS.pm\
  src/core/JSON/Pretty.pm\
  src/core/Distribution.pm\
  src/core/CompUnit/DependencySpecification.pm\
  src/core/CompUnit/Handle.pm\
  src/core/CompUnit/Loader.pm\
  src/core/CompUnit/PrecompilationStore.pm\
  src/core/CompUnit/PrecompilationStore/File.pm\
  src/core/CompUnit/PrecompilationRepository.pm\
  src/core/CompUnit/Repository.pm\
  src/core/CompUnit/Repository/Installable.pm\
  src/core/CompUnit.pm\
  src/core/CompUnit/RepositoryRegistry.pm\
  src/core/CompUnit/Repository/Locally.pm\
  src/core/CompUnit/Repository/FileSystem.pm\
  src/core/CompUnit/Repository/Installation.pm\
  src/core/CompUnit/Repository/AbsolutePath.pm\
  src/core/CompUnit/Repository/NQP.pm\
  src/core/CompUnit/Repository/Perl5.pm\
  src/core/Argfiles.pm\
  src/core/Process.pm\
  src/core/StrDistance.pm\
  src/core/Slang.pm\
  src/core/Metamodel/Primitives.pm\
  src/core/core_epilogue.pm\


PERL6_DEBUG_MOAR = perl6-debug.moarvm
M_DEBUG_RUNNER = perl6-debug-m
M_GDB_RUNNER = perl6-gdb-m
M_VALGRIND_RUNNER = perl6-valgrind-m

M_CLEANUPS = \
  *.manifest \
  blib/Perl6/*.moarvm \
  $(SETTING_MOAR) \
  $(R_SETTING_MOAR) \
  $(PERL6_MOAR) \
  rakudo_test_run.tar.gz \
  $(M_BUILD_DIR) \
  $(M_RUNNER) \
  $(M_PERL6_OPS_DLL) \
  $(M_PERL6_OPS_OBJ) \
  $(M_PERL6_CONT_OBJ) \
  $(M_PERL6_OPS_DLL) \
  $(PERL6_DEBUG_MOAR) \
  $(M_DEBUG_RUNNER) \
  $(M_GDB_RUNNER) \
  $(M_VALGRIND_RUNNER)

M_HARNESS_WITH_FUDGE = $(PERL) t/harness --fudge --moar --keep-exit-code
HARNESS = $(PERL) t/harness

m-all: $(PERL6_MOAR) $(SETTING_MOAR) $(R_SETTING_MOAR) $(M_RUNNER) $(PERL6_DEBUG_MOAR) $(M_DEBUG_RUNNER) $(M_GDB_RUNNER) $(M_VALGRIND_RUNNER)

$(M_PERL6_OPS_DLL): $(M_PERL6_OPS_SRC) $(M_PERL6_CONT_SRC) Makefile
	$(M_CC) -c -fPIC $(M_CFLAGS) -I$(PREFIX)/include/libatomic_ops \
	    -I$(PREFIX)/include/dyncall -I$(PREFIX)/include/moar \
	    -I$(PREFIX)/include/sha1 -I$(PREFIX)/include/tinymt  -I$(PREFIX)/include/libtommath \
	    -I$(PREFIX)/include/libuv -I$(PREFIX)/include -o $(M_PERL6_OPS_OBJ) $(M_PERL6_OPS_SRC)
	$(M_CC) -c -fPIC $(M_CFLAGS) -I$(PREFIX)/include/libatomic_ops \
	    -I$(PREFIX)/include/dyncall -I$(PREFIX)/include/moar \
	    -I$(PREFIX)/include/sha1 -I$(PREFIX)/include/tinymt  -I$(PREFIX)/include/libtommath \
	    -I$(PREFIX)/include/libuv -I$(PREFIX)/include -o $(M_PERL6_CONT_OBJ) $(M_PERL6_CONT_SRC)
	$(M_LD)  -L/home/travis/.rakudobrew/moar-nom/install/lib -shared -fPIC $(M_LDFLAGS) -o $(M_PERL6_OPS_DLL) $(M_PERL6_OPS_OBJ) $(M_PERL6_CONT_OBJ) -lmoar 

$(PERL6_ML_MOAR): src/Perl6/ModuleLoader.nqp src/vm/moar/ModuleLoaderVMConfig.nqp
	$(M_NQP) $(M_GEN_CAT) src/vm/moar/ModuleLoaderVMConfig.nqp src/Perl6/ModuleLoader.nqp > $(M_BUILD_DIR)/m-ModuleLoader.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_ML_MOAR) --encoding=utf8 \
	    $(M_BUILD_DIR)/m-ModuleLoader.nqp

$(PERL6_OPS_MOAR): src/vm/moar/Perl6/Ops.nqp $(M_PERL6_OPS_DLL)
	$(M_NQP) --target=mbc --output=$(PERL6_OPS_MOAR) --encoding=utf8 \
	    src/vm/moar/Perl6/Ops.nqp

$(PERL6_W_MOAR): $(PERL6_ML_MOAR) $(PERL6_OPS_MOAR) $(PERL6_P_MOAR) src/Perl6/World.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_W_MOAR) --encoding=utf8 \
	    src/Perl6/World.nqp

$(PERL6_P_MOAR): src/Perl6/Pod.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_P_MOAR) --encoding=utf8 \
	    src/Perl6/Pod.nqp

$(PERL6_A_MOAR): src/Perl6/Actions.nqp $(PERL6_P_MOAR) $(PERL6_OPS_MOAR)
	$(M_NQP) $(M_GEN_CAT) src/Perl6/Actions.nqp > $(M_BUILD_DIR)/m-Perl6-Actions.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_A_MOAR) --encoding=utf8 \
	    $(M_BUILD_DIR)/m-Perl6-Actions.nqp

$(PERL6_G_MOAR): src/Perl6/Grammar.nqp $(PERL6_W_MOAR) $(PERL6_A_MOAR) $(PERL6_P_MOAR)
	$(M_NQP) --target=mbc --output=$(PERL6_G_MOAR) --encoding=utf8 \
	    src/Perl6/Grammar.nqp

$(PERL6_O_MOAR): src/Perl6/Optimizer.nqp $(PERL6_OPS_MOAR)
	$(M_NQP) $(M_GEN_CAT) src/Perl6/Optimizer.nqp > $(M_BUILD_DIR)/m-Perl6-Optimizer.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_O_MOAR) --encoding=utf8 \
	    $(M_BUILD_DIR)/m-Perl6-Optimizer.nqp

$(PERL6_C_MOAR): src/Perl6/Compiler.nqp $(PERL6_O_MOAR)
	$(M_NQP) --target=mbc --output=$(PERL6_C_MOAR) --encoding=utf8 \
	    src/Perl6/Compiler.nqp

$(PERL6_MOAR): src/main.nqp $(PERL6_G_MOAR) $(PERL6_A_MOAR) $(PERL6_C_MOAR) $(PERL6_P_MOAR)
	$(PERL) tools/build/gen-version.pl > $(M_BUILD_DIR)/main-version.nqp
	$(M_NQP) $(M_GEN_CAT) src/main.nqp $(M_BUILD_DIR)/main-version.nqp > $(M_BUILD_DIR)/m-main.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_MOAR) \
	    --vmlibs=$(M_PERL6_OPS_DLL)=Rakudo_ops_init $(M_BUILD_DIR)/m-main.nqp

$(PERL6_M_MOAR): $(M_METAMODEL_SOURCES) $(PERL6_OPS_MOAR)
	$(M_NQP) $(M_GEN_CAT) -f tools/build/common_bootstrap_sources > $(M_BUILD_DIR)/m-Metamodel.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_M_MOAR) --encoding=utf8 \
	    $(M_BUILD_DIR)/m-Metamodel.nqp

$(PERL6_B_MOAR): $(BOOTSTRAP_SOURCES) $(PERL6_M_MOAR)
	$(M_NQP) $(M_GEN_CAT) $(BOOTSTRAP_SOURCES) > $(M_BUILD_DIR)/m-BOOTSTRAP.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_B_MOAR) --encoding=utf8 \
        --vmlibs=$(M_PERL6_OPS_DLL)=Rakudo_ops_init $(M_BUILD_DIR)/m-BOOTSTRAP.nqp

$(SETTING_MOAR): $(PERL6_MOAR) $(PERL6_B_MOAR) $(M_CORE_SOURCES)
	$(M_NQP) $(M_GEN_CAT) -f tools/build/moar_core_sources > $(M_BUILD_DIR)/m-CORE.setting
	@echo "The following step can take a long time, please be patient."
	$(M_RUN_PERL6) --setting=NULL --ll-exception --optimize=3 --target=mbc --stagestats --output=$(SETTING_MOAR) $(M_BUILD_DIR)/m-CORE.setting

$(R_SETTING_MOAR): $(PERL6_MOAR) $(SETTING_MOAR) $(R_SETTING_SRC)
	$(M_RUN_PERL6) --target=mbc --ll-exception --output=$(R_SETTING_MOAR) $(R_SETTING_SRC)

$(M_RUNNER): tools/build/create-moar-runner.pl $(PERL6_MOAR)
	$(RM_F) $(M_RUNNER)
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm perl6-m . "" "$(M_LIBPATH)" .
	-$(CHMOD) 755 $(M_RUNNER)

m-runner-default: $(M_RUNNER)
	$(RM_F) perl6
	-$(CP) $(M_RUNNER) perl6
	-$(CHMOD) 755 perl6

$(PERL6_DEBUG_MOAR): src/perl6-debug.nqp $(PERL6_MOAR)
	$(M_NQP) $(M_GEN_CAT) src/perl6-debug.nqp $(M_BUILD_DIR)/main-version.nqp > $(M_BUILD_DIR)/m-perl6-debug.nqp
	$(M_NQP) --target=mbc --output=$(PERL6_DEBUG_MOAR) \
	    --vmlibs=$(M_PERL6_OPS_DLL)=Rakudo_ops_init $(M_BUILD_DIR)/m-perl6-debug.nqp

$(M_DEBUG_RUNNER): tools/build/create-moar-runner.pl $(PERL6_DEBUG_MOAR)
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6-debug.moarvm perl6-debug-m . "" "$(M_LIBPATH)" .

$(M_GDB_RUNNER): tools/build/create-moar-runner.pl $(PERL6_MOAR)
	$(RM_F) $(M_GDB_RUNNER)
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm perl6-gdb-m . "gdb" "$(M_LIBPATH)" .
	-$(CHMOD) 755 $(M_GDB_RUNNER)

$(M_VALGRIND_RUNNER): tools/build/create-moar-runner.pl $(PERL6_MOAR)
	$(RM_F) $(M_VALGRIND_RUNNER)
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm perl6-valgrind-m . "valgrind" "$(M_LIBPATH)" .
	-$(CHMOD) 755 $(M_VALGRIND_RUNNER)


##  testing targets
m-test    : m-coretest

m-fulltest: m-coretest m-stresstest

m-coretest: m-all
	$(HARNESS) --moar t/01-sanity t/04-nativecall

# Run the spectests that we know work.
m-spectest: m-testable t/spectest.data
	$(M_HARNESS_WITH_FUDGE) --tests-from-file=t/spectest.data

m-spectest_full: m-testable
	$(M_HARNESS_WITH_FUDGE) t/spec

m-quicktest: m-testable t/spectest.data
	$(M_HARNESS_WITH_FUDGE) --tests-from-file=t/spectest.data --long=0

m-stresstest: m-testable t/spectest.data
	$(M_HARNESS_WITH_FUDGE) --tests-from-file=t/spectest.data --stress=1

#spectest_smolder: rakudo_test_run.tar.gz
#	./perl6 -e "shell qqx[git log -1 --pretty=format:%H].fmt(qq[curl -F architecture= -F platform= -F revision=%s -F report_file=@rakudo_test_run.tar.gz -F username=parrot-autobot -F password=qa_rocks http://smolder.parrot.org/app/projects/process_add_report/5])"

m-testable : m-all spectest_checkout spectest_update

# Run the tests in t/localtest.data
m-localtest: m-all spectest_checkout t/localtest.data
	@$(M_HARNESS_WITH_FUDGE) --tests-from-file=t/localtest.data

# Run the tests in t/localtest.data with a higher verbosity
m-localtest_loud: m-all spectest_checkout t/localtest.data
	@$(M_HARNESS_WITH_FUDGE) --tests-from-file=t/localtest.data --verbosity=1

# Run many tests of your choice.
# make sometests TESTFILES=t/foo/bar
m-sometests: m-all
	@$(M_HARNESS_WITH_FUDGE) $(TESTFILES)

m-install: m-all tools/build/create-moar-runner.pl tools/build/install-core-dist.pl
	$(MKPATH) $(DESTDIR)$(PREFIX)/bin
	$(MKPATH) $(DESTDIR)$(M_LIBPATH)/Perl6
	$(CP) $(M_PERL6_LANG_OUTPUT) $(DESTDIR)$(M_LIBPATH)/Perl6
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/lib
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/runtime
	$(CP) $(SETTING_MOAR) $(R_SETTING_MOAR) $(DESTDIR)$(PERL6_LANG_DIR)/runtime
	$(CP) $(PERL6_MOAR) $(PERL6_DEBUG_MOAR) $(DESTDIR)$(PERL6_LANG_DIR)/runtime
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/runtime/dynext
	$(CP) $(M_PERL6_OPS_DLL) $(DESTDIR)$(PERL6_LANG_DIR)/runtime/dynext
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/dist
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/sources
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/resources
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/bin
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/short
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/vendor/dist
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/vendor/sources
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/vendor/resources
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/vendor/bin
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/vendor/short
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/site/dist
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/site/sources
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/site/resources
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/site/bin
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/site/short
	./$(M_RUNNER) tools/build/install-core-dist.pl $(DESTDIR)$(PERL6_LANG_DIR)
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm $(DESTDIR)$(PREFIX)/bin/perl6-m "$(PERL6_LANG_DIR)/runtime" "" "$(M_LIBPATH)" "$(PERL6_LANG_DIR)/lib" "$(PERL6_LANG_DIR)/runtime"
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6-debug.moarvm $(DESTDIR)$(PREFIX)/bin/perl6-debug-m "$(PERL6_LANG_DIR)/runtime" "" "$(M_LIBPATH)" "$(PERL6_LANG_DIR)/lib" "$(PERL6_LANG_DIR)/runtime"
	$(CHMOD) 755 $(DESTDIR)$(PREFIX)/bin/perl6-m$(M_BAT)
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm $(DESTDIR)$(PREFIX)/bin/perl6-gdb-m "$(PERL6_LANG_DIR)/runtime" "gdb" "$(M_LIBPATH)" "$(PERL6_LANG_DIR)/lib" "$(PERL6_LANG_DIR)/runtime"
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm $(DESTDIR)$(PREFIX)/bin/perl6-valgrind-m "$(PERL6_LANG_DIR)/runtime" "valgrind" "$(M_LIBPATH)" "$(PERL6_LANG_DIR)/lib" "$(PERL6_LANG_DIR)/runtime"

m-runner-default-install: m-install
	$(PERL) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm $(DESTDIR)$(PREFIX)/bin/perl6-m "$(PERL6_LANG_DIR)/runtime" "" "$(M_LIBPATH)" "$(PERL6_LANG_DIR)/lib" "$(PERL6_LANG_DIR)/runtime"
	$(CP) $(DESTDIR)$(PREFIX)/bin/perl6-m$(M_BAT) $(DESTDIR)$(PREFIX)/bin/perl6$(M_BAT)
	$(CHMOD) 755 $(DESTDIR)$(PREFIX)/bin/perl6$(M_BAT)

manifest:
	echo MANIFEST >MANIFEST
	git ls-files | $(PERL) -ne '/^\./ || print' >>MANIFEST
	cd t/spec && git clean -xdf
	find t/spec -type f | grep -v '\.git' >>MANIFEST
	sort -u -o MANIFEST MANIFEST

release: manifest
	[ -n "$(VERSION)" ] || ( echo "\nTry 'make release VERSION=yyyy.mm'\n\n"; exit 1 )
	bash -c '[ "$$(cat VERSION)" == "$(VERSION)" ] || ( echo -e "\nVersion on command line and in VERSION file differ\n"; exit 1 )'
	[ -d rakudo-$(VERSION) ] || ln -s . rakudo-$(VERSION)
	$(PERL) -ne 'print "rakudo-$(VERSION)/$$_"' MANIFEST | \
	    tar -zcv -T - -f rakudo-$(VERSION).tar.gz
	rm rakudo-$(VERSION)


##  cleaning
m-clean:
	$(RM_F) $(M_CLEANUPS)
	$(RM_F) non-existent-copy-mtgt non-existent-copy-stgt

m-testclean:


# (end of section generated from tools/build/Makefile-Moar.in)


t/*/*.t t/*.t t/*/*/*.t: all
	$(M_HARNESS_WITH_FUDGE) --verbosity=1 $@
