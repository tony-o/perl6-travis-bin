/* This file contains a PMC that represents an S-Table. An STable is fairly
 * dumb semantically and the PMC is really just a "holder" and makes sure we
 * mark things as needed in GC. */

#include "../6model/sixmodelobject.h"

/* This is a source of type cache IDs (see notes below about them). 
 * The lowest one is 8. This is to make the lower three bits available for
 * defined/undefined flag and native type flags for the multi dispatch cache,
 * which is the main reason these IDs exist at all. */
static INTVAL TypeCacheIDSource = 0;
static INTVAL get_next_type_cache_id(void) {
    /* XXX The C# original is doing:
     *     return Interlocked.Add(ref TypeCacheIDSource, 8);
     * But we don't yet have an abstraction layer for an atomic addition
     * so this is not yet threadsafe. */
    TypeCacheIDSource += 8;
    return TypeCacheIDSource;
}

pmclass STable manual_attrs dynpmc group nqp {
    /* Initializes the STable's type cache ID; and sets the HOW to
     * the supplied object. Leaves the rest to be filled out. Also
     * flags PMC as needing custom mark and destroy. */
    VTABLE void init_pmc(PMC *HOW) {
        /* Put underlying struct in place. */
        STable *st = mem_allocate_zeroed_typed(STable);
        UNUSED(INTERP)
        st->type_cache_id = get_next_type_cache_id();
        st->HOW = HOW;
        PMC_data(SELF) = st;

        /* We need to mark our stuff, and free it at the end. */
        PObj_custom_mark_SET(SELF);
        PObj_custom_destroy_SET(SELF);
    }

    /* This marks the various things that we reference. */
    VTABLE void mark() :no_wb {
        STable *st = (STable *)PMC_data(SELF);
        INTVAL i;

        /* Mark REPR, HOW, WHO and WHAT. */
        if (!PMC_IS_NULL(st->HOW))
            Parrot_gc_mark_PMC_alive(interp, st->HOW);
        if (!PMC_IS_NULL(st->WHAT))
            Parrot_gc_mark_PMC_alive(interp, st->WHAT);
        if (!PMC_IS_NULL(st->WHO))
            Parrot_gc_mark_PMC_alive(interp, st->WHO);
        if (!PMC_IS_NULL(st->method_cache))
            Parrot_gc_mark_PMC_alive(interp, st->method_cache);

        /* Give the REPR a chance to mark it's own data. */
        if (st->REPR->gc_mark_repr_data)
            st->REPR->gc_mark_repr_data(interp, st);
            
        /* Mark the v-table cache. */
        for (i = 0; i < st->vtable_length; i++) {
            PMC *entry = st->vtable[i];
            if (!PMC_IS_NULL(entry))
                Parrot_gc_mark_PMC_alive(interp, entry);
        }
        
        /* Mark the boolification spec, if needed. */
        if (st->boolification_spec && !PMC_IS_NULL(st->boolification_spec->method))
            Parrot_gc_mark_PMC_alive(interp, st->boolification_spec->method);
            
        /* Mark the container spec data, if needed. */
        if (st->container_spec) {
            Parrot_gc_mark_STRING_alive(interp, st->container_spec->name);
            st->container_spec->gc_mark_data(interp, st);
        }
        
        /* Mark the invocation spec, if needed. */
        if (st->invocation_spec) {
            if (!PMC_IS_NULL(st->invocation_spec->value_slot.class_handle))
                Parrot_gc_mark_PMC_alive(interp, st->invocation_spec->value_slot.class_handle);
            if (!STRING_IS_NULL(st->invocation_spec->value_slot.attr_name))
                Parrot_gc_mark_STRING_alive(interp, st->invocation_spec->value_slot.attr_name);
            if (!PMC_IS_NULL(st->invocation_spec->invocation_handler))
                Parrot_gc_mark_PMC_alive(interp, st->invocation_spec->invocation_handler);
        }

        /* If we have one, mark the Parrot v-table mapping. */
        if (st->parrot_vtable_mapping)
            for (i = PARROT_VTABLE_LOW; i < NUM_VTABLE_FUNCTIONS + PARROT_VTABLE_LOW; i++)
                if (!PMC_IS_NULL(st->parrot_vtable_mapping[i]))
                    Parrot_gc_mark_PMC_alive(interp, st->parrot_vtable_mapping[i]);

        /* If it's parametric of parameterized, mark the appropriate bits. */
        if (st->mode_flags & SM_PARAMETRIC_TYPE) {
            if (!PMC_IS_NULL(st->paramet.ric.parameterizer))
                Parrot_gc_mark_PMC_alive(interp, st->paramet.ric.parameterizer);
            if (!PMC_IS_NULL(st->paramet.ric.lookup))
                Parrot_gc_mark_PMC_alive(interp, st->paramet.ric.lookup);
        }
        else if (st->mode_flags & SM_PARAMETERIZED_TYPE) {
            if (!PMC_IS_NULL(st->paramet.erized.parametric_type))
                Parrot_gc_mark_PMC_alive(interp, st->paramet.erized.parametric_type);
            if (!PMC_IS_NULL(st->paramet.erized.parameters))
                Parrot_gc_mark_PMC_alive(interp, st->paramet.erized.parameters);
        }
    }

    VTABLE void destroy() {
        /* Give the REPR a chance to destroy it's own data. */
        STable *st = (STable *)PMC_data(SELF);
        if (st->REPR->gc_free_repr_data)
            st->REPR->gc_free_repr_data(interp, st);
    
        /* If a v-table was allocated, free that. */
        if (st->vtable) {
            mem_sys_free(st->vtable);
            st->vtable = NULL;
        }
        
        /* If a Parrot v-table mapping was installed, free that. */
        if (st->parrot_vtable_mapping) {
            mem_sys_free(st->parrot_vtable_mapping);
            st->parrot_vtable_mapping = NULL;
        }
        
        /* Free the container spec data, if needed. */
        if (st->container_spec)
            st->container_spec->gc_free_data(interp, st);
        
        /* Free the underlying struct. */
        mem_sys_free(PMC_data(SELF));
        PMC_data(SELF) = NULL;
    }
}
