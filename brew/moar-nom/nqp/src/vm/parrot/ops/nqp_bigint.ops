BEGIN_OPS_PREAMBLE

/* Parroty includes. */
#include "parrot/parrot.h"
#include "parrot/extend.h"
#include "parrot/dynext.h"
#include "../6model/sixmodelobject.h"
#include "../6model/reprs/P6bigint.h"

/* The ID of the bigint REPR. */
static INTVAL bigint_repr_id = 0;
static INTVAL smo_id = 0;

static mp_int * get_bigint(PARROT_INTERP, PMC *obj) {
    struct SixModel_REPROps *r;

    if (obj->vtable->base_type == smo_id)
        r = REPR(obj);
    else
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
                "Can't get bigint from something that isn't a SixModel object");

    if (r->ID == bigint_repr_id)
        return &((P6bigintInstance *)PMC_data(obj))->body.i;
    else
        return &((P6bigintBody *)r->box_funcs->get_boxed_ref(interp, STABLE(obj), OBJECT_BODY(obj),
            bigint_repr_id))->i;
}

static FLOATVAL mp_get_double(mp_int *a) {
    FLOATVAL d    = 0.0;
    FLOATVAL sign = SIGN(a) == MP_NEG ? -1.0 : 1.0;
    int i;
    if (USED(a) == 0)
        return d;
    if (USED(a) == 1)
        return sign * (FLOATVAL) DIGIT(a, 0);

    mp_clamp(a);
    i = USED(a) - 1;
    d = (FLOATVAL) DIGIT(a, i);
    i--;
    if (i == -1) {
        return sign * d;
    }
    d *= pow(2.0, DIGIT_BIT);
    d += (FLOATVAL) DIGIT(a, i);

    if (USED(a) > 2) {
        i--;
        d *= pow(2.0, DIGIT_BIT);
        d += (FLOATVAL) DIGIT(a, i);
    }

    d *= pow(2.0, DIGIT_BIT * i);
    return sign * d;
}


static void from_num(FLOATVAL d, mp_int *a) {
    FLOATVAL d_digit = pow(2, DIGIT_BIT);
    FLOATVAL da      = fabs(d);
    FLOATVAL upper;
    FLOATVAL lower;
    FLOATVAL lowest;
    FLOATVAL rest;
    int      digits  = 0;

    mp_zero(a);

    while (da > d_digit * d_digit * d_digit) {;
        da /= d_digit;
        digits++;
    }
    mp_grow(a, digits + 3);

    /* populate the top 3 digits */
    upper = da / (d_digit*d_digit);
    rest = fmod(da, d_digit*d_digit);
    lower = rest / d_digit;
    lowest = fmod(rest,d_digit );
    if (upper >= 1) {
        mp_set_long(a, (unsigned long) upper);
        mp_mul_2d(a, DIGIT_BIT , a);
        DIGIT(a, 0) = (mp_digit) lower;
        mp_mul_2d(a, DIGIT_BIT , a);
    } else {
        if (lower >= 1) {
            mp_set_long(a, (unsigned long) lower);
            mp_mul_2d(a, DIGIT_BIT , a);
            a->used = 2;
        } else {
            a->used = 1;
        }
    }
    DIGIT(a, 0) = (mp_digit) lowest;

    /* shift the rest */
    mp_mul_2d(a, DIGIT_BIT * digits, a);
    if (d < 0)
        mp_neg(a, a);
    mp_clamp(a);
    mp_shrink(a);
}

/* Bitops on libtomath (no 2s compliment API) are horrendously inefficient and
 * really should be hand-coded to work DIGIT-by-DIGIT with in-loop carry
 * handling.  For now we have these fixups.
 *
 * The following inverts the bits of a negative bigint, adds 1 to that, and
 * appends sign-bit extension DIGITs to it to give us a 2s compliment
 * representation in memory.  Do not call it on positive bigints.
 */
static void grow_and_negate(mp_int *a, int size, mp_int *b) {
    int i;
    /* Always add an extra DIGIT so we can tell positive values
     * with a one in the highest bit apart from negative values.
     */
    int actual_size = MAX(size, USED(a)) + 1;

    SIGN(b) = MP_ZPOS;
    mp_grow(b, actual_size);
    USED(b) = actual_size;
    for (i = 0; i < USED(a); i++) {
        DIGIT(b, i) = (~DIGIT(a, i)) & MP_MASK;
    }
    for (; i < actual_size; i++) {
        DIGIT(b, i) = MP_MASK;
    }
    /* Note: This add cannot cause another grow assuming nobody ever
     * tries to use tommath -0 for anything, and nobody tries to use
     * this on positive bigints.
     */
    mp_add_d(b, 1, b);
}

static void two_complement_bitop(mp_int *a, mp_int *b, mp_int *c,
        int (*mp_bitop)(mp_int *, mp_int *, mp_int *)) {

    mp_int d;
    mp_int e;
    mp_int *f;
    mp_int *g;

    f = a;
    g = b;
    if (MP_NEG == SIGN(a)) {
        mp_init(&d);
        grow_and_negate(a, USED(b), &d);
        f = &d;
    }
    if (MP_NEG == SIGN(b)) {
        mp_init(&e);
        grow_and_negate(b, USED(a), &e);
        g = &e;
    }
    /* f and g now guaranteed to each point to positive bigints containing
     * a 2s compliment representation of the values in a and b.  If either
     * a or b was negative, the representation is one tomath "digit" longer
     * than it need be and sign extended.
     */
    mp_bitop(f, g, c);
    if (f == &d) mp_clear(&d);
    if (g == &e) mp_clear(&e);
    /* Use the fact that tomath clamps to detect results that should be
     * signed.  If we created extra tomath "digits" and they resulted in
     * sign bits of 0, they have been clamped away.  If the resulting sign
     * bits were 1, they remain, and c will have more digits than either of
     * original operands.  Note this only works because we do not
     * support NOR/NAND/NXOR, and so two zero sign bits can never create 1s.
     */
    if (USED(c) > MAX(USED(a),USED(b))) {
        int i;
        for (i = 0; i < USED(c); i++) {
            DIGIT(c, i) = (~DIGIT(c, i)) & MP_MASK;
        }
        mp_add_d(c, 1, c);
	mp_neg(c, c);
    }
}

static void two_complement_shl(mp_int *result, mp_int *value, INTVAL count) {
    if (count >= 0) {
        mp_mul_2d(value, count, result);
    }
    else if (MP_NEG == SIGN(value)) {
        /* fake two's complement semantics on top of sign-magnitude
         * algorithm appears to work [citation needed]
         */
        mp_add_d(value, 1, result);
        mp_div_2d(result, -count, result, NULL);
        mp_sub_d(result, 1, result);
    }
    else {
        mp_div_2d(value, -count, result, NULL);
    }
}

END_OPS_PREAMBLE

/*
 * The ops in here mostly just delegate off to libtommath. nqp_bigint_setup must be
 * called before you create any types using the bigint representation.
 */

inline op nqp_bigint_setup() :base_core {
    /* Register the bigint representation. */
    if (!bigint_repr_id) {
        bigint_repr_id = REGISTER_DYNAMIC_REPR(interp,
            Parrot_str_new_constant(interp, "P6bigint"),
            P6bigint_initialize);
        srand((unsigned int) Parrot_util_int_rand(0));
    }
    smo_id = Parrot_pmc_get_type_str(interp, Parrot_str_new(interp, "SixModelObject", 0));
}

inline op nqp_bigint_add(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_add(a, b, get_bigint(interp, $1));
}

inline op nqp_bigint_sub(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_sub(a, b, get_bigint(interp, $1));
}

inline op nqp_bigint_mul(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_mul(a, b, get_bigint(interp, $1));
}

/* see below for the floordiv op which is what nqp and rakudo use to
/* actually implement integer division */
inline op nqp_bigint_div(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    int result;
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    result = mp_div(a, b, get_bigint(interp, $1), NULL);
    if (result == MP_VAL)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Divide by zero");
}

inline op nqp_bigint_floordiv(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    int cmp_a = mp_cmp_d(a, 0);
    int cmp_b = mp_cmp_d(b, 0);

    mp_int remainder;
    mp_int intermediate;
    int result;

    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    if ((cmp_a == MP_LT) ^ (cmp_b == MP_LT)) {
        mp_init(&remainder);
        mp_init(&intermediate);
        result = mp_div(a, b, &intermediate, &remainder);
        if (result == MP_VAL) {
            mp_clear(&remainder);
            mp_clear(&intermediate);
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
                "Divide by zero");
        }
        if (mp_iszero(&remainder) == 0) {
            mp_sub_d(&intermediate, 1, get_bigint(interp, $1));
        } else {
            mp_copy(&intermediate, get_bigint(interp, $1));
        }
        mp_clear(&remainder);
        mp_clear(&intermediate);
    } else {
        result = mp_div(a, b, get_bigint(interp, $1), NULL);
        if (result == MP_VAL)
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
                "Divide by zero");
    }
}

inline op nqp_bigint_mod(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_mod(a, b, get_bigint(interp, $1));
}

inline op nqp_bigint_exp_mod(out PMC, invar PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    mp_int *c = get_bigint(interp, $4);
    $1 = REPR($5)->allocate(interp, STABLE($5));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_exptmod(a, b, c, get_bigint(interp, $1));
}

inline op nqp_bigint_is_prime(out INT, invar PMC, in INT) {
    /* mp_prime_is_prime returns True for 1, and I think
     * it's worth special-casing this particular number :-)
     */
    mp_int *a = get_bigint(interp, $2);
    if (mp_cmp_d(a, 1) == MP_EQ) {
        $1 = 0;
    }
    else {
        int result;
        mp_prime_is_prime(a, $3, &result);
        $1 = result;
    }
}

/* generates a pseudo random number up to $2 of type $3 */
inline op nqp_bigint_rand(out PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = NULL;

    $1 = REPR($3)->allocate(interp, STABLE($3));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));

    b = get_bigint(interp, $1);
    mp_rand(b, USED(a) + 1);
    mp_mod(b, a, b);
}


inline op nqp_bigint_neg(out PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    $1 = REPR($3)->allocate(interp, STABLE($3));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_neg(a, get_bigint(interp, $1));
}
inline op nqp_bigint_abs(out PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    $1 = REPR($3)->allocate(interp, STABLE($3));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_abs(a, get_bigint(interp, $1));
}

inline op nqp_bigint_cmp(out INT, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = mp_cmp(a, b);
}

inline op nqp_bigint_bool(out INT, invar PMC) :base_core {
    $1 = !mp_iszero(get_bigint(interp, $2));
}

inline op nqp_bigint_eq(out INT, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = MP_EQ == mp_cmp(a, b);
}

inline op nqp_bigint_ne(out INT, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = MP_EQ != mp_cmp(a, b);
}

inline op nqp_bigint_gt(out INT, invar PMC, invar PMC) :base_cor {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = MP_GT == mp_cmp(a, b);
}

inline op nqp_bigint_ge(out INT, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = MP_LT != mp_cmp(a, b);
}

inline op nqp_bigint_lt(out INT, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = MP_LT == mp_cmp(a, b);
}

inline op nqp_bigint_le(out INT, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = MP_GT != mp_cmp(a, b);
}

inline op nqp_bigint_gcd(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_gcd(a, b, get_bigint(interp, $1));
}

inline op nqp_bigint_lcm(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_lcm(a, b, get_bigint(interp, $1));
}

inline op nqp_bigint_from_str(out PMC, in STR, invar PMC) :base_core {
    const char *buf = Parrot_str_cstring(interp, $2);
    $1 = REPR($3)->allocate(interp, STABLE($3));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    mp_read_radix(get_bigint(interp, $1), buf, 10);
}

inline op nqp_bigint_to_str(out STR, invar PMC) :base_core {
    mp_int *i = get_bigint(interp, $2);
    int len;
    char *buf;
    mp_radix_size(i, 10, &len);
    buf = (char *) mem_sys_allocate(len);
    mp_toradix(i, buf, 10);
    /* len - 1 because buf is \0-terminated */
    $1 = Parrot_str_new(interp, buf, len - 1);
    mem_sys_free(buf);
}

inline op nqp_bigint_to_str_base(out STR, invar PMC, in INT) :base_core {
    mp_int *i = get_bigint(interp, $2);
    int len;
    char *buf;
    mp_radix_size(i, $3, &len);
    buf = (char *) mem_sys_allocate(len);
    mp_toradix(i, buf, $3);
    /* len - 1 because buf is \0-terminated */
    $1 = Parrot_str_new(interp, buf, len - 1);
    mem_sys_free(buf);
}

inline op nqp_bigint_to_num(out NUM, invar PMC) :base_core {
    mp_int  *a = get_bigint(interp, $2);
    $1         = mp_get_double(a);
}

inline op nqp_bigint_from_num(out PMC, in NUM, invar PMC) :base_core {
    $1 = REPR($3)->allocate(interp, STABLE($3));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    from_num($2, get_bigint(interp, $1));
}

inline op nqp_bigint_div_num(out NUM, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);

    int max_size = DIGIT_BIT * MAX(USED(a), USED(b));
    if (max_size > 1023) {
        mp_int reduced_a, reduced_b;
        mp_init(&reduced_a);
        mp_init(&reduced_b);
        mp_div_2d(a, max_size - 1023, &reduced_a, NULL);
        mp_div_2d(b, max_size - 1023, &reduced_b, NULL);
        $1 = mp_get_double(&reduced_a) / mp_get_double(&reduced_b);
        mp_clear(&reduced_a);
        mp_clear(&reduced_b);
    } else {
        $1 = mp_get_double(a) / mp_get_double(b);
    }
}

inline op nqp_bigint_shr(out PMC, invar PMC, in INT, invar PMC) :base_core {
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    two_complement_shl(get_bigint(interp, $1), get_bigint(interp, $2), -$3);
}

inline op nqp_bigint_shl(out PMC, invar PMC, in INT, invar PMC) :base_core {
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    two_complement_shl(get_bigint(interp, $1), get_bigint(interp, $2), $3);
}

inline op nqp_bigint_band(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    two_complement_bitop(a, b, get_bigint(interp, $1), mp_and);
}
inline op nqp_bigint_bor(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    two_complement_bitop(a, b, get_bigint(interp, $1), mp_or);
}
inline op nqp_bigint_bxor(out PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b = get_bigint(interp, $3);
    $1 = REPR($4)->allocate(interp, STABLE($4));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    two_complement_bitop(a, b, get_bigint(interp, $1), mp_xor);
}
inline op nqp_bigint_bnot(out PMC, invar PMC, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    mp_int *b;
    $1 = REPR($3)->allocate(interp, STABLE($3));
    REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
    b = get_bigint(interp, $1);

    /* 2s complement: add 1, negate */
    mp_add_d(a, 1, b);
    mp_neg(b, b);
}


/*

=item nqp_bigint_radix(out, radix, str, pos, flag, type)

Convert string $3 into a number starting at offset $4 and using radix $2.
The result of the conversion returns a FixedPMCArray of size 3 with objects
of type $6, which is either a bigint or some type that boxes one.

The contents of $6 are the return value, the base to divide the value by if
it is something after a decimal dot, and the new position.

The $5 flags is a bitmask that modifies the parse and/or result:
    0x01: negate the result (useful if you've already parsed a minus)
    0x02: parse a leading +/- and negate the result on -
    0x04: parse trailing zeroes but do not include in result
          (for parsing values after a decimal point)

=cut

*/

inline op nqp_bigint_radix(out PMC, in INT, in STR, in INT, in INT, invar PMC) :base_core {
    PMC      *out;
    INTVAL   radix  = $2;
    STRING   *str   = $3;
    INTVAL   zpos   = $4;
    INTVAL   flags  = $5;
    INTVAL   chars  = Parrot_str_length(interp, str);
    int      neg    = 0;
    INTVAL   ch;
    mp_int   zvalue;
    mp_int   zbase;
    PMC      *value_obj;
    mp_int   *value;
    PMC      *base_obj;
    mp_int   *base;
    PMC      *pos_obj;
    INTVAL   pos    = -1;
    
    if (radix > 36) {
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Cannot convert radix of %d (max 36)", radix);
    }
    
    mp_init(&zvalue);
    mp_init(&zbase);
    mp_set_int(&zbase, 1);
    
    value_obj = REPR($6)->allocate(interp, STABLE($6));
    REPR(value_obj)->initialize(interp, STABLE(value_obj), OBJECT_BODY(value_obj));
    value = get_bigint(interp, value_obj);
    
    base_obj = REPR($6)->allocate(interp, STABLE($6));
    REPR(base_obj)->initialize(interp, STABLE(base_obj), OBJECT_BODY(base_obj));
    base = get_bigint(interp, base_obj);
    mp_set_int(base, 1);

    ch = (zpos < chars) ? STRING_ord(interp, str, zpos) : 0;
    if ((flags & 0x02) && (ch == '+' || ch == '-')) {
        neg = (ch == '-');
        zpos++;
        ch = (zpos < chars) ? STRING_ord(interp, str, zpos) : 0;
    }
    while (zpos < chars) {
        if (ch >= '0' && ch <= '9') ch = ch - '0';
        else if (ch >= 'a' && ch <= 'z') ch = ch - 'a' + 10;
        else if (ch >= 'A' && ch <= 'Z') ch = ch - 'A' + 10;
        else break;
        if (ch >= radix) break;
        mp_mul_d(&zvalue, radix, &zvalue);
        mp_add_d(&zvalue, ch, &zvalue);
        mp_mul_d(&zbase, radix, &zbase);
        zpos++; pos = zpos;
        if (ch != 0 || !(flags & 0x04)) { mp_copy(&zvalue, value); mp_copy(&zbase, base); }
        if (zpos >= chars) break;
        ch = STRING_ord(interp, str, zpos);
        if (ch != '_') continue;
        zpos++;
        if (zpos >= chars) break;
        ch = STRING_ord(interp, str, zpos);
    }
    
    mp_clear(&zvalue);
    mp_clear(&zbase);
    
    pos_obj = REPR($6)->allocate(interp, STABLE($6));
    REPR(pos_obj)->initialize(interp, STABLE(pos_obj), OBJECT_BODY(pos_obj));
    REPR(pos_obj)->box_funcs->set_int(interp, STABLE(pos_obj), OBJECT_BODY(pos_obj), pos);

    if (neg || flags & 0x01) { mp_neg(value, value); }
    out = Parrot_pmc_new(interp, enum_class_FixedPMCArray);
    VTABLE_set_integer_native(interp, out, 3);
    VTABLE_set_pmc_keyed_int(interp, out, 0, value_obj);
    VTABLE_set_pmc_keyed_int(interp, out, 1, base_obj);
    VTABLE_set_pmc_keyed_int(interp, out, 2, pos_obj);
    $1 = out;
}

/* calculates $1 = $2 ** $3
 * if it either overflows ($3 being too big), or $2 is negative,
 * a float is returned. $4 should contain the type object to box the
 * float into, $5 the type object to box the bigint into.
 */
inline op nqp_bigint_pow(out PMC, invar PMC, invar PMC, invar PMC, invar PMC) :base_core {
    mp_digit exponent_d = 0;
    mp_int *exponent = get_bigint(interp, $3);
    mp_int *base     = get_bigint(interp, $2);
    int cmp          = mp_cmp_d(exponent, 0);
    if (cmp == MP_EQ || MP_EQ == mp_cmp_d(base, 1)) {
        /* $x ** 0 or 1 ** $x */
        $1 = REPR($5)->allocate(interp, STABLE($5));
        REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
        mp_set_int(get_bigint(interp, $1), 1);
    }
    else if (cmp == MP_GT) {
        exponent_d = mp_get_int(exponent);
        if (MP_GT == mp_cmp_d(exponent, exponent_d)) {
            /* the exponent is larger than what fits into an int register...
             * that's scary, and should be treated with care */


            /* XXX a bit ugly that it reuses cmp, but safe for now */
            cmp = mp_cmp_d(base, 0);
            if (MP_EQ == cmp || MP_EQ == mp_cmp_d(base, 1)) {
                /* 0 ** $big_number and 1 ** big_number are easy to do: */
                $1 = REPR($2)->allocate(interp, STABLE($2));
                REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
                mp_copy(base, get_bigint(interp, $1));
            }
            else {
                FLOATVAL ZERO = 0.0;
                $1 = REPR($4)->allocate(interp, STABLE($4));
                REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
                /* TODO: better ways to create +- Inf */
                if (MP_GT == cmp) {
                    REPR($1)->box_funcs->set_num(interp, STABLE($1), OBJECT_BODY($1), (FLOATVAL) 1.0/ZERO);
                }
                else {
                    REPR($1)->box_funcs->set_num(interp, STABLE($1), OBJECT_BODY($1), (FLOATVAL) -1.0/ZERO);
                }
            }
        }
        else {
            /* since the exponent fits into a digit, mp_expt_d is fine */
            $1 = REPR($5)->allocate(interp, STABLE($5));
            REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
            mp_expt_d(get_bigint(interp, $2), exponent_d, get_bigint(interp, $1));
        }
    }
    else {
        FLOATVAL f_base = mp_get_double(base);
        FLOATVAL f_exp  = mp_get_double(exponent);
        $1 = REPR($4)->allocate(interp, STABLE($4));
        REPR($1)->initialize(interp, STABLE($1), OBJECT_BODY($1));
        REPR($1)->box_funcs->set_num(interp, STABLE($1), OBJECT_BODY($1), pow(f_base, f_exp));
    }
}

/* returns 1 if $2 is too large to fit into an INTVAL without loss of
   information */
inline op nqp_bigint_is_big(out INT, invar PMC) :base_core {
    mp_int *a = get_bigint(interp, $2);
    $1 = a->used > 1;
    /* XXX somebody please check that on a 32 bit platform */
    if ( sizeof(INTVAL) * 8 < DIGIT_BIT && $1 == 0 && DIGIT(a, 0) & ~0x7FFFFFFFUL)
        $1 = 1;
}
