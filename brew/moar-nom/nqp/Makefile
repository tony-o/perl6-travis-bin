
# Makefile code generated by Configure.pl:
all: m-all m-runner-default
install: m-install m-runner-default-install
clean: m-clean
test: m-test
qregex-test: m-qregex-test
# common definitions used by all backends

COMMON_HLL_SOURCES = \
  src/HLL/Grammar.nqp \
  src/HLL/Actions.nqp \
  src/HLL/Compiler.nqp \
  src/HLL/CommandLine.nqp \
  src/HLL/World.nqp \
  src/HLL/sprintf.nqp \

HLL_COMBINED = NQPHLL.nqp

CORE_SETTING_SOURCES = \
  src/core/NativeTypes.nqp \
  src/core/NQPRoutine.nqp \
  src/core/NQPMu.nqp \
  src/core/NQPCapture.nqp \
  src/core/IO.nqp \
  src/core/Regex.nqp \
  src/core/Hash.nqp \
  src/core/NQPLock.nqp \
  src/core/testing.nqp \
  src/core/YOUAREHERE.nqp \

CORE_SETTING_COMBINED = NQPCORE.setting

QASTNODE_SOURCES = \
  src/QAST/CompileTimeValue.nqp \
  src/QAST/SpecialArg.nqp \
  src/QAST/Children.nqp \
  src/QAST/Node.nqp \
  src/QAST/NodeList.nqp \
  src/QAST/Regex.nqp \
  src/QAST/IVal.nqp \
  src/QAST/NVal.nqp \
  src/QAST/SVal.nqp \
  src/QAST/BVal.nqp \
  src/QAST/WVal.nqp \
  src/QAST/Want.nqp \
  src/QAST/Var.nqp \
  src/QAST/VarWithFallback.nqp \
  src/QAST/ParamTypeCheck.nqp \
  src/QAST/Op.nqp \
  src/QAST/VM.nqp \
  src/QAST/Stmts.nqp \
  src/QAST/Stmt.nqp \
  src/QAST/Block.nqp \
  src/QAST/Unquote.nqp \
  src/QAST/CompUnit.nqp \
  src/QAST/InlinePlaceholder.nqp \

QASTNODE_COMBINED = QASTNode.nqp

P5QREGEX_SOURCES = \
  src/QRegex/P5Regex/Grammar.nqp \
  src/QRegex/P5Regex/Actions.nqp \
  src/QRegex/P5Regex/Compiler.nqp \

P5QREGEX_COMBINED = NQPP5QRegex.nqp

P6QREGEX_SOURCES  = \
  src/QRegex/P6Regex/Grammar.nqp \
  src/QRegex/P6Regex/Actions.nqp \
  src/QRegex/P6Regex/Compiler.nqp \
  src/QRegex/P6Regex/Optimizer.nqp \

P6QREGEX_COMBINED = NQPP6QRegex.nqp

QREGEX_SOURCES = \
  src/QRegex/NFA.nqp \
  src/QRegex/Cursor.nqp \

QREGEX_COMBINED = QRegex.nqp

COMMON_NQP_SOURCES  = \
  src/NQP/World.nqp \
  src/NQP/Grammar.nqp \
  src/NQP/Optimizer.nqp \
  src/NQP/Actions.nqp \
  src/NQP/Compiler.nqp \

NQP_COMBINED = NQP.nqp

QAST_COMBINED = QAST.nqp

NQP_MO_SOURCES = src/how/Archetypes.nqp src/how/RoleToRoleApplier.nqp \
                 src/how/NQPConcreteRoleHOW.nqp src/how/RoleToClassApplier.nqp \
                 src/how/NQPCurriedRoleHOW.nqp src/how/NQPParametricRoleHOW.nqp \
                 src/how/NQPClassHOW.nqp src/how/NQPNativeHOW.nqp \
                 src/how/NQPAttribute.nqp src/how/NQPModuleHOW.nqp \
                 src/how/EXPORTHOW.nqp \

NQP_MO_COMBINED = nqpmo.nqp

PERL          = /usr/bin/perl
MKPATH        = $(PERL) -MExtUtils::Command -e mkpath
CHMOD         = $(PERL) -MExtUtils::Command -e chmod
CP            = $(PERL) -MExtUtils::Command -e cp
RM_RF         = $(PERL) -MExtUtils::Command -e rm_rf
RM_F          = $(PERL) -MExtUtils::Command -e rm_f
SHELL         = sh

SYSROOT         = 
PREFIX          = /home/travis/brew/moar-nom/install
BIN_DIR         = $(PREFIX)/bin
NQP_LANG_DIR    = $(PREFIX)/share/nqp
NQP_LIB_DIR     = $(NQP_LANG_DIR)/lib
PROVE           = prove

# nqp::makefile <-- tells NQP::Configure to treat this file as a makefile,
#                   performing win32 slash and makefile conversions

BAT          = 
MOAR         = $(BIN_DIR)/moar
M_RUNNER     = nqp-m$(BAT)

M_STAGE0 = src/vm/moar/stage0
M_STAGE1 = gen/moar/stage1
M_STAGE2 = gen/moar/stage2

M_STAGE0_NQP = $(MOAR) --libpath=$(M_STAGE0) $(M_STAGE0)/nqp.moarvm --bootstrap
M_STAGE1_NQP = $(MOAR) --libpath=$(M_STAGE1) $(M_STAGE1)/nqp.moarvm --bootstrap

NQP_MO_MOAR     = nqpmo.moarvm

MODULE_LOADER_MOAR = ModuleLoader.moarvm

CORE_SETTING_MOAR     = NQPCORE.setting.moarvm

QASTNODE_MOAR     = QASTNode.moarvm

QREGEX_MOAR     = QRegex.moarvm

HLL_MOAR       = NQPHLL.moarvm
M_HLL_SOURCES  = src/vm/moar/HLL/Backend.nqp $(COMMON_HLL_SOURCES)

MASTOPS_MOAR   = MASTOps.moarvm
MASTNODES_MOAR = MASTNodes.moarvm

QAST_MOAR     = QAST.moarvm
M_QAST_SOURCES  = \
  src/vm/moar/QAST/QASTRegexCompilerMAST.nqp \
  src/vm/moar/QAST/QASTOperationsMAST.nqp \
  src/vm/moar/QAST/QASTCompilerMAST.nqp \

P6QREGEX_MOAR     = NQPP6QRegex.moarvm

P5QREGEX_MOAR     = NQPP5QRegex.moarvm

NQP_MOAR     = nqp.moarvm
M_NQP_SOURCES= src/vm/moar/NQP/Ops.nqp $(COMMON_NQP_SOURCES)

M_STAGE1_OUTPUT = $(M_STAGE1)/$(NQP_MO_MOAR) $(M_STAGE1)/$(MODULE_LOADER_MOAR) \
                $(M_STAGE1)/$(CORE_SETTING_MOAR) $(M_STAGE1)/$(QASTNODE_MOAR) \
                $(M_STAGE1)/$(QREGEX_MOAR) $(M_STAGE1)/$(HLL_MOAR) \
                $(M_STAGE1)/$(MASTOPS_MOAR) $(M_STAGE1)/$(MASTNODES_MOAR) \
                $(M_STAGE1)/$(QAST_MOAR) $(M_STAGE1)/$(P6QREGEX_MOAR) \
                $(M_STAGE1)/$(NQP_MOAR)

M_STAGE2_OUTPUT = $(M_STAGE2)/$(NQP_MO_MOAR) $(M_STAGE2)/$(MODULE_LOADER_MOAR) \
                $(M_STAGE2)/$(CORE_SETTING_MOAR) $(M_STAGE2)/$(QASTNODE_MOAR) \
                $(M_STAGE2)/$(QREGEX_MOAR) $(M_STAGE2)/$(HLL_MOAR) \
                $(M_STAGE2)/$(MASTOPS_MOAR) $(M_STAGE2)/$(MASTNODES_MOAR) \
                $(M_STAGE2)/$(QAST_MOAR) $(M_STAGE2)/$(P6QREGEX_MOAR) \
                $(M_STAGE2)/$(NQP_MOAR)

manifest:
	echo MANIFEST >MANIFEST
	git ls-files >>MANIFEST

release: manifest
	[ -n "$(VERSION)" ] || ( echo "\nTry 'make release VERSION=yyyy.mm'\n\n"; exit 1 )
	bash -c '[ "$$(cat VERSION)" == "$(VERSION)" ] || ( echo -e "\nVersion on command line and in VERSION file differ\n"; exit 1 )'
	[ -d nqp-$(VERSION) ] || ln -s . nqp-$(VERSION)
	$(PERL) -ne 'print "nqp-$(VERSION)/$$_"' MANIFEST |\
	    tar -zcv -T - -f nqp-$(VERSION).tar.gz
	rm nqp-$(VERSION)

distclean: realclean

realclean: clean
	$(RM_F) Makefile MANIFEST config.status nqp$(BAT)

testclean:

m-all: $(NQP_MOAR) $(M_RUNNER) $(P5QREGEX_MOAR)

m-install: m-all
	$(MKPATH) $(DESTDIR)$(BIN_DIR)
	$(MKPATH) $(DESTDIR)$(NQP_LIB_DIR)
	$(MKPATH) $(DESTDIR)$(NQP_LIB_DIR)/profiler
	$(CP) $(NQP_MO_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(MODULE_LOADER_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(CORE_SETTING_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(QASTNODE_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(QREGEX_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(HLL_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(MASTOPS_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(MASTNODES_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(QAST_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(P6QREGEX_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(NQP_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(P5QREGEX_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) src/vm/moar/profiler/template.html $(DESTDIR)$(NQP_LIB_DIR)/profiler/template.html
	$(PERL) tools/build/install-moar-runner.pl "$(DESTDIR)" $(PREFIX)

# FIXME:
M_CLEANUPS = *.moarvm  gen/moar/* $(M_RUNNER)

m-clean:
	$(RM_RF) $(M_CLEANUPS)

$(M_STAGE1): $(M_STAGE1_OUTPUT)

$(M_STAGE1)/$(NQP_MO_MOAR): $(M_STAGE0) $(NQP_MO_SOURCES)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(NQP_MO_SOURCES) > $(M_STAGE1)/$(NQP_MO_COMBINED)
	$(M_STAGE0_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(NQP_MO_MOAR) $(M_STAGE1)/$(NQP_MO_COMBINED)

$(M_STAGE1)/$(MODULE_LOADER_MOAR): $(M_STAGE0) src/vm/moar/ModuleLoader.nqp
	$(M_STAGE0_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(MODULE_LOADER_MOAR) src/vm/moar/ModuleLoader.nqp

$(M_STAGE1)/$(CORE_SETTING_MOAR): $(M_STAGE0) $(CORE_SETTING_SOURCES) $(M_STAGE1)/$(NQP_MO_MOAR) $(M_STAGE1)/$(MODULE_LOADER_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(CORE_SETTING_SOURCES) > $(M_STAGE1)/$(CORE_SETTING_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(CORE_SETTING_MOAR) $(M_STAGE1)/$(CORE_SETTING_COMBINED)

$(M_STAGE1)/$(QASTNODE_MOAR): $(M_STAGE0) $(QASTNODE_SOURCES) $(M_STAGE1)/$(CORE_SETTING_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QASTNODE_SOURCES) > $(M_STAGE1)/$(QASTNODE_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(QASTNODE_MOAR) $(M_STAGE1)/$(QASTNODE_COMBINED)

$(M_STAGE1)/$(QREGEX_MOAR): $(M_STAGE0) $(QREGEX_SOURCES) $(M_STAGE1)/$(QASTNODE_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QREGEX_SOURCES) > $(M_STAGE1)/$(QREGEX_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(QREGEX_MOAR) $(M_STAGE1)/$(QREGEX_COMBINED)

$(M_STAGE1)/$(HLL_MOAR): $(M_STAGE0) $(M_HLL_SOURCES) $(M_STAGE1)/$(QREGEX_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_HLL_SOURCES) > $(M_STAGE1)/$(HLL_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(HLL_MOAR) $(M_STAGE1)/$(HLL_COMBINED)

$(M_STAGE1)/$(MASTOPS_MOAR): $(M_STAGE0) $(M_STAGE1)/$(CORE_SETTING_MOAR) /home/travis/brew/moar-nom/install/share/nqp/lib/MAST/Ops.nqp
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(MASTOPS_MOAR) /home/travis/brew/moar-nom/install/share/nqp/lib/MAST/Ops.nqp

$(M_STAGE1)/$(MASTNODES_MOAR): $(M_STAGE0) $(M_STAGE1)/$(MASTOPS_MOAR) /home/travis/brew/moar-nom/install/share/nqp/lib/MAST/Nodes.nqp
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(MASTNODES_MOAR) /home/travis/brew/moar-nom/install/share/nqp/lib/MAST/Nodes.nqp

$(M_STAGE1)/$(QAST_MOAR): $(M_STAGE0) $(M_QAST_SOURCES) $(M_STAGE1)/$(HLL_MOAR) $(M_STAGE1)/$(MASTNODES_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_QAST_SOURCES) > $(M_STAGE1)/$(QAST_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(QAST_MOAR) $(M_STAGE1)/$(QAST_COMBINED)

$(M_STAGE1)/$(P6QREGEX_MOAR): $(M_STAGE0) $(P6QREGEX_SOURCES) $(M_STAGE1)/$(QAST_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P6QREGEX_SOURCES) > $(M_STAGE1)/$(P6QREGEX_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1)/$(P6QREGEX_MOAR) $(M_STAGE1)/$(P6QREGEX_COMBINED)

$(M_STAGE1)/$(NQP_MOAR): $(M_STAGE0) $(M_NQP_SOURCES) $(M_STAGE1)/$(P6QREGEX_MOAR)
	$(MKPATH) $(M_STAGE1)/gen
	$(PERL) tools/build/gen-version.pl > $(M_STAGE1)/nqp-config.nqp
	$(PERL) tools/build/gen-cat.pl moar $(M_NQP_SOURCES) $(M_STAGE1)/nqp-config.nqp > $(M_STAGE1)/$(NQP_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1) --setting-path=$(M_STAGE1) \
	    --setting=NQPCORE --target=mbc --no-regex-lib \
	    --output=$(M_STAGE1)/$(NQP_MOAR) $(M_STAGE1)/$(NQP_COMBINED)

$(M_STAGE2): $(M_STAGE1_OUTPUT)

$(M_STAGE2)/$(NQP_MO_MOAR): $(M_STAGE1) $(NQP_MO_SOURCES)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(NQP_MO_SOURCES) > $(M_STAGE2)/$(NQP_MO_COMBINED)
	$(M_STAGE1_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(NQP_MO_MOAR) $(M_STAGE2)/$(NQP_MO_COMBINED)

$(M_STAGE2)/$(MODULE_LOADER_MOAR): $(M_STAGE1) src/vm/moar/ModuleLoader.nqp
	$(M_STAGE1_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(MODULE_LOADER_MOAR) src/vm/moar/ModuleLoader.nqp

$(M_STAGE2)/$(CORE_SETTING_MOAR): $(M_STAGE1) $(CORE_SETTING_SOURCES) $(M_STAGE2)/$(NQP_MO_MOAR) $(M_STAGE2)/$(MODULE_LOADER_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(CORE_SETTING_SOURCES) > $(M_STAGE2)/$(CORE_SETTING_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(CORE_SETTING_MOAR) $(M_STAGE2)/$(CORE_SETTING_COMBINED)

$(M_STAGE2)/$(QASTNODE_MOAR): $(M_STAGE1) $(QASTNODE_SOURCES) $(M_STAGE2)/$(CORE_SETTING_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QASTNODE_SOURCES) > $(M_STAGE2)/$(QASTNODE_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(QASTNODE_MOAR) $(M_STAGE2)/$(QASTNODE_COMBINED)

$(M_STAGE2)/$(QREGEX_MOAR): $(M_STAGE1) $(QREGEX_SOURCES) $(M_STAGE2)/$(QASTNODE_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QREGEX_SOURCES) > $(M_STAGE2)/$(QREGEX_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(QREGEX_MOAR) $(M_STAGE2)/$(QREGEX_COMBINED)

$(M_STAGE2)/$(HLL_MOAR): $(M_STAGE1) $(M_HLL_SOURCES) $(M_STAGE2)/$(QREGEX_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_HLL_SOURCES) > $(M_STAGE2)/$(HLL_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(HLL_MOAR) $(M_STAGE2)/$(HLL_COMBINED)

$(M_STAGE2)/$(MASTOPS_MOAR): $(M_STAGE1) $(M_STAGE2)/$(CORE_SETTING_MOAR) /home/travis/brew/moar-nom/install/share/nqp/lib/MAST/Ops.nqp
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(MASTOPS_MOAR) /home/travis/brew/moar-nom/install/share/nqp/lib/MAST/Ops.nqp

$(M_STAGE2)/$(MASTNODES_MOAR): $(M_STAGE1) $(M_STAGE2)/$(MASTOPS_MOAR) /home/travis/brew/moar-nom/install/share/nqp/lib/MAST/Nodes.nqp
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(MASTNODES_MOAR) /home/travis/brew/moar-nom/install/share/nqp/lib/MAST/Nodes.nqp

$(M_STAGE2)/$(QAST_MOAR): $(M_STAGE1) $(M_QAST_SOURCES) $(M_STAGE2)/$(HLL_MOAR) $(M_STAGE2)/$(MASTNODES_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_QAST_SOURCES) > $(M_STAGE2)/$(QAST_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(QAST_MOAR) $(M_STAGE2)/$(QAST_COMBINED)

$(M_STAGE2)/$(P6QREGEX_MOAR): $(M_STAGE1) $(P6QREGEX_SOURCES) $(M_STAGE2)/$(QAST_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P6QREGEX_SOURCES) > $(M_STAGE2)/$(P6QREGEX_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2)/$(P6QREGEX_MOAR) $(M_STAGE2)/$(P6QREGEX_COMBINED)

$(M_STAGE2)/$(NQP_MOAR): $(M_STAGE1) $(M_NQP_SOURCES) $(M_STAGE2)/$(P6QREGEX_MOAR)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-version.pl > $(M_STAGE2)/nqp-config.nqp
	$(PERL) tools/build/gen-cat.pl moar $(M_NQP_SOURCES) $(M_STAGE2)/nqp-config.nqp > $(M_STAGE2)/$(NQP_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2) --setting-path=$(M_STAGE2) \
	    --setting=NQPCORE --target=mbc --no-regex-lib \
	    --output=$(M_STAGE2)/$(NQP_MOAR) $(M_STAGE2)/$(NQP_COMBINED)

$(NQP_MOAR): $(M_STAGE2_OUTPUT)
	$(CP) $(M_STAGE2)/$(NQP_MO_MOAR) .
	$(CP) $(M_STAGE2)/$(MODULE_LOADER_MOAR) .
	$(CP) $(M_STAGE2)/$(CORE_SETTING_MOAR) .
	$(CP) $(M_STAGE2)/$(QASTNODE_MOAR) .
	$(CP) $(M_STAGE2)/$(QREGEX_MOAR) .
	$(CP) $(M_STAGE2)/$(HLL_MOAR) .
	$(CP) $(M_STAGE2)/$(MASTOPS_MOAR) .
	$(CP) $(M_STAGE2)/$(MASTNODES_MOAR) .
	$(CP) $(M_STAGE2)/$(QAST_MOAR) .
	$(CP) $(M_STAGE2)/$(P6QREGEX_MOAR) .
	$(CP) $(M_STAGE2)/$(NQP_MOAR) .

$(M_RUNNER): tools/build/gen-moar-runner.pl
	$(PERL) tools/build/gen-moar-runner.pl "$(MOAR)"

m-runner-default: m-all
	$(CP) $(M_RUNNER) nqp$(BAT)
	$(CHMOD) 755 nqp$(BAT)

m-runner-default-install: m-runner-default m-install
	$(CP) $(DESTDIR)$(BIN_DIR)/$(M_RUNNER) $(DESTDIR)$(BIN_DIR)/nqp$(BAT)
	$(CHMOD) 755 $(DESTDIR)$(BIN_DIR)/nqp$(BAT)

$(P5QREGEX_MOAR): $(P5QREGEX_SOURCES) $(NQP_MOAR) $(M_RUNNER)
	$(MKPATH) $(M_STAGE2)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P5QREGEX_SOURCES) > $(M_STAGE2)/$(P5QREGEX_COMBINED)
	./$(M_RUNNER) --target=mbc --output=$(P5QREGEX_MOAR) \
	    $(M_STAGE2)/$(P5QREGEX_COMBINED)

m-bootstrap-files: $(M_STAGE2_OUTPUT)
	$(CP) $(M_STAGE2)/$(NQP_MO_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(MODULE_LOADER_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(CORE_SETTING_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(QASTNODE_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(QREGEX_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(HLL_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(MASTOPS_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(MASTNODES_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(QAST_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(P6QREGEX_MOAR) $(M_STAGE0)
	$(CP) $(M_STAGE2)/$(NQP_MOAR) $(M_STAGE0)

## testing

m-test: m-all
	$(PROVE) -r --exec "./$(M_RUNNER)" t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall

m-test-loud: m-all
	$(PROVE) -r -v --exec "./$(M_RUNNER)" t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall

m-core-test: $(M_RUNNER)
	$(PROVE) -r --exec "./$(M_RUNNER)" t/nqp

m-core-test-loud: $(M_RUNNER)
	$(PROVE) -r -v --exec "./$(M_RUNNER)" t/nqp

m-qregex-test: $(M_RUNNER)
	$(PROVE) -r --exec "./$(M_RUNNER)" t/qregex

m-qregex-test-loud: $(M_RUNNER)
	$(PROVE) -r -v --exec "./$(M_RUNNER)" t/qregex

# nqp::makefile <-- tells NQP::Configure to treat this file as a makefile,
#                   performing win32 slash and makefile conversions
t/*/*.t: all
	prove -r -v --exec ./nqp $@
